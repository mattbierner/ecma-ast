/**
 * @fileOverview Data structures used to track locations in ECMAScript source
 *   text.
 */
package (
    SourcePosition
    SourceLocation)
{

/* Positions
 ******************************************************************************/
// SourcePosition
////////////////////////////////////////
/**
 * Data structure for a point in source code.
 */
SourcePosition = function\line, column =self-> {
    self.line = line;
    self.column = column;
};
SourcePosition.prototype.constructor = SourcePosition;

/**
 * Initial SourcePosition in a stream.
 */
SourcePosition.initial = new SourcePosition(1, 0);

SourcePosition.prototype.increment = \tok =self->
    ?tok === '\n'
        :new SourcePosition(self.line + 1, 0)
        :new SourcePosition(self.line, self.column + 1);

SourcePosition.prototype.toString = \() =self->
    "{line:" + self.line + " col:" + self.column + "}";

SourcePosition.prototype.compare = \pos =self->
    ?self.line === pos.line
        :self.column - pos.column
        :self.line - pos.line;

// SourceLocation
////////////////////////////////////////
/**
 * Data structure for a location in source code. Locations are a range of
 * characters in source code.
 */
SourceLocation = function\file, start, end =self-> {
    self.file = file;
    self.start = start;
    self.end = end;
};

SourceLocation.prototype.toString = \() =self->
    '{' + self.file + ' start:' + self.start + ' end:' + self.end + '}';

/**
 * 
 */
SourceLocation.merge = \s1, s2 ->
    new SourceLocation(s1.file,
        ?s1.start.compare(s2.start) > 0 :s2.start :s1.start,
        ?s1.end.compare(s2.end) > 0 :s1.end :s2.end);

}