/**
 * @fileOverview Node definition
 */
package (
    Node,
    
    construct,
    reconstruct,
    modify,
    setLoc,
    setUserData,

    getData,
    modifyData,
    setData,

    defineNode)
with
    import './serialization' {registerNode}
in {

var keys := Object.keys;

var setProperty = \obj, prop, value -> {
    var out = {};
    var props := keys(obj);
    for (var i = 0, len = props.length; i < len; i = i + 1)
        out.(i) = obj.(i);
    out.(prop) = value;
    return out;
};

/* Node
 ******************************************************************************/
/**
 * Base class for nodes
 * 
 * @param loc Location.
 * @param ud UserData
 */
Node = function \loc, ud =self-> {
    Object.defineProperties(self, {
        'loc': {
            'value': loc,
            'enumerable': false,
            'writable': true
        },
        'ud': {
            'value': (ud || null),
            'enumerable': false,
            'writable': true
        }
    });
};

/* Operations
 ******************************************************************************/
/**
 * Construct a node with given attributes and children.
 * 
 * Nulls all undefined children.
 * 
 * @param proto Node prototype.
 * @param loc Location.
 * @param ud Userdata.
 * @param children Object mappings keys to children values.
 * @param attributes Object mappings keys to attribute values.
 * 
 * @return New node.
 */
construct = function \base, loc, ud, children, attributes -> {
    var obj = new (base.constructor)(loc);
    obj.ud = ud;
    
    // Copy explicit children
    var childs = base.children;
    for (var i = 0, len = childs.length; i < len; i = i + 1)
    with k = childs.(i) in {
        obj.(k) = (children.(k) || null);
    }
    
    // Copy Attributes
    var attrs = base.attributes;
    for (var i = 0, len = attrs.length; i < len; i = i + 1)
    with k = attrs.(i) in {
        obj.(k) = (attributes.(k) || null);
    }
    
    return obj;
};

/**
 * Reconstruct a node with new attributes and children.
 * 
 * @param base Node to reconstruct.
 * @param children Object mappings keys to children values.
 * @param attributes Object mappings keys to attribute values.
 * 
 * @return Reconstructed node.
 */
reconstruct = \base, children, attributes ->
    construct(
        base,
        base.loc,
        base.ud,
        children,
        attributes);

/**
 * Create a new node from a base with children and attributes included from
 * `children` and `attributes`.
 * 
 * Unlike `reconstruct`, `children` and `attributes` are not the list of all
 * properties the node will have, but difference with the current node.
 * 
 * @param base Base node to transform.
 * @param children Object mappings keys to children values.
 * @param attributes Object mappings keys to attribute values.
 * 
 * @return Modified node.
 */
modify = function \base, children, attributes -> {
    var obj = new (base.constructor)(base.loc);
    obj.ud = base.ud;
    
    // Copy explicit children
    var childs = base.children;
    for (var i = 0, len = childs.length; i < len; i = i + 1)
    with k = childs.(i) in {
        obj.(k) = (children.(k) || base.(k));
    }
    
    // Copy Attributes
    var attrs = base.attributes;
    for (var i = 0, len = attrs.length; i < len; i = i + 1)
    with k = attrs.(i) in {
        obj.(k) = (attributes.(k) || base.(k));
    }
    
    return obj;
};

/**
 * Set the loc of a node.
 * 
 * @param base Base node to transform.
 * @param loc New loc.
 * 
 * @return Transformed node.
 */
setLoc = \base, loc ->
    construct(
        base,
        loc,
        base.ud,
        base,
        base);

/**
 * Set the user data of a node.
 * 
 * @param base Base node to transform.
 * @param ud New user data.
 * 
 * @return Transformed node.
 */
setUserData = \base, ud ->
    construct(
        base,
        base.loc,
        ud,
        base,
        base);

/* User Data
 ******************************************************************************/
/**
 * Get a user data entry.
 * 
 * @param node Node to transform.
 * @param key Targeted user data key.
 * 
 * @return Value or null if none.
 */
getData = \node, key ->
    (node.ud && node.ud.(key));

/**
 * Modifies a user data entry.
 * 
 * @param node Node to transform.
 * @param key Targeted user data key.
 * @param f Function mapping current value to new value.
 * 
 * @return Transformed node.
 */
modifyData = \node, key, f ->
    setData(
        node,
        key,
        f <| getData(node, key));

/**
 * Set a user data entry.
 * 
 * @param node Node to transform.
 * @param key Targeted user data key.
 * @param value New value.
 * 
 * @return Transformed node.
 */
setData = \node, key, value ->
    setUserData(
        node,
        setProperty(
            (node.ud || {}),
            key,
            value));

/* Creation
 ******************************************************************************/
defineNode = \parent, type, children, attributes, ctor -> {
    ctor.type = type;
    ctor.prototype = new parent();
    ctor.prototype.constructor = ctor;
    ctor.prototype.children = children;
    ctor.prototype.attributes = attributes;
    ctor.prototype.type = ctor.type;
    
    var Fwd = function \args =self->
        ctor.apply(self, args);
    Fwd.prototype = ctor.prototype;
    ctor.create = \args(...) -> new Fwd(args);
    
    registerNode(type, ctor);
    return ctor;
};

}